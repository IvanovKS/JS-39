// * Задание 1
// Существует множество алгоритмов сортировки, некоторые из наиболее известных включают:
// 1. Сортировка пузырьком (Bubble Sort): Каждая пара соседних элементов сравнивается, и они меняются местами, если они расположены в неправильном порядке. Этот процесс продолжается до тех пор, пока весь массив не будет отсортирован.
// 2. Сортировка выбором (Selection Sort): Этот алгоритм ищет наименьший элемент в массиве и помещает его в начало. Затем он ищет следующий наименьший элемент и помещает его после первого обработанного элемента. Процесс повторяется до тех пор, пока массив не будет отсортирован.
// 3. Сортировка вставками (Insertion Sort): Этот алгоритм рассматривает каждый элемент и вставляет его в отсортированный массив на соответствующую позицию.
// 4. Сортировка слиянием (Merge Sort): Он разделяет массив на две части, сортирует их отдельно, а затем объединяет в отсортированный массив.
// 5. Быстрая сортировка (Quick Sort): Алгоритм выбирает опорный элемент из массива и разделает массив на две части: элементы, меньшие опорного, и элементы, большие опорного. После этого алгоритм рекурсивно применяется к обеим частям.
// 6. Пирамидальная сортировка (Heap Sort): Этот алгоритм строит из массива двоичное дерево (или кучу), а затем преобразует его в отсортированный массив.
// Это лишь несколько примеров алгоритмов сортировки, и существует множество других эффективных методов для сортировки данных.Выбор алгоритма сортировки зависит от размера данных, их распределения и других условий, поэтому важно выбирать подходящий алгоритм для каждого конкретного случая.

// * Задание 2
// Операторы:
// 1. Арифметические операторы: + (сложение), - (вычитание), * (умножение), / (деление), % (остаток от деления).
// 2. Операторы сравнения: == (равно), === (строгое равенство), != (не равно), > (больше), < (меньше), >= (больше или равно), <= (меньше или равно).
// 3. Логические операторы: && (логическое "и"), || (логическое "или"), ! (логическое "не"), ?? (оператор нулевого слияния - возвращает первое из значений, которое не является "null" или "undefined").
// 4. Операторы присваивания: = (присваивание значения), += (прибавление значения), -= (вычитание значения), *= (умножение значения), /= (деление значения).
// 5. Тернарный оператор: условие ? выражение1 : выражение2.
// 6. Унарный оператор: delete (удаление), typeof (тип операнда), void (выражение, которое должно быть вычислено без возвращения результата)
// 7. Строковый оператор: + (позволяет объединить две строки, возвращая при этом третью строку, которая представляет собой объединение двух строк-операндов)
// 8. Оператор запятая (,) просто вычисляет оба операнда и возвращает значение последнего операнда. Данный оператор в основном используется внутри цикла for, что позволяет при каждом прохождении цикла одновременно обновлять значения нескольких переменных
// 9. Операторы отношения - сравнивает свои операнды и возвращает результат сравнения в виде булева значения: in (возвращает true, если указанный объект имеет указанное свойство), instanceof (возвращает true, если заданный объект является объектом указанного типа)

// Выражения:
// Выражением является любой корректный блок кода, который возвращает значение.
// Концептуально, существуют два типа выражений: те которые присваивают переменной значение, и те, которые вычисляют значение без его присваивания.
// Все выражения в JavaScript делятся на следующие категории:
// 1). Арифметические: вычисляются в число, например: 3.14159 (Используют арифметические операторы).
// 2). Строковые: вычисляются в текстовую строку, например: "Fred" или "234" (Используют строковые операторы).
// 3). Логические: вычисляются в true или false (Используют логические операторы).
// 4). Основные выражения: Базовые ключевые слова и основные выражения в JavaScript (оператор this, оператор группировки "скобки" ( )).
// 5). Левосторонние выражения: Значениям слева назначаются значения справа (оператор new, super).

// Циклы:
// 1. Цикл "for": Позволяет повторять блок кода определенное количество раз.
// 2. Цикл "while": Повторяет блок кода, пока условие истинно.
// 3. Цикл "do-while": Повторяет блок кода, затем проверяет условие.
// 4. Цикл "for...in": Перебирает свойства объекта.
// 5. Цикл "for...of": Используется для перебора итерируемых объектов (массивы, строки и др.).
// 6. Цикл "switch-case": Используется для выбора действия на основе значения выражения.
