// *Задание 1

// В JavaScript массивы являются особой разновидностью объектов, которая может содержать в себе различные структуры данных: строки, числа, булевы значения, а также другие массивы, объекты и функции. Это делает их ближе к хеш-таблицам, чем к обычным массивам в других языках программирования.
// Из-за этого свойства массивы в JavaScript могут оказаться менее эффективными по сравнению с массивами в других языках при работе с большими объемами данных. Организация данных в массивах JavaScript может привести к конфликтам в производительности, когда массивы используются для хранения разнородных данных, в отличие от массивов в других языках, которые обычно работают только с элементами одного и того же типа.
// Хотя массивы в JavaScript часто бывают удобными, их универсальность может привести к проблемам эффективности при работе с большими объемами данных. В таких случаях может быть предпочтительнее использовать другие структуры данных, более точно соответствующие типам операций, которые необходимо выполнять.

// *Задание 2

// Привязать контекст объекта к функции logger, чтобы при вызове this.item выводило - some value (Привязать через bind, call, apply)
function logger() {
  console.log(`I output only external context: ${this.item}`);
}

const obj = { item: 'some value' };

console.group('Task 2:');
logger.call(obj);
logger.apply(obj);
logger.bind(obj)();
console.groupEnd;

// *Задание 3.1

// Создайте массив чисел и найдите его сумму
const arr1 = [10, 15, 20];
const sumOfItems = arr1.reduce((a, b) => a + b, 0);

// Создайте массив строк и объедините их в одну строку
const arr2 = ['a', 'b', 'c'];
const groupOfStrings = arr2.join('');

// Найдите максимальный и минимальный элементы в массиве чисел
const maxNumber = arr1.sort((a, b) => b - a)[0];
const minNumber = arr1.sort((a, b) => a - b)[0];

console.group('Task 3.1:');
console.log(sumOfItems);
console.log(groupOfStrings);
console.log(maxNumber);
console.log(minNumber);
console.groupEnd;

// *Задание 3.2
